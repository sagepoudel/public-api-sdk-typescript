/**
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.4
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { CreateFilterForDestination200Response } from '../model/createFilterForDestination200Response';
import { CreateFilterForDestinationV1Input } from '../model/createFilterForDestinationV1Input';
import { GetFilterInDestination200Response } from '../model/getFilterInDestination200Response';
import { ListFiltersFromDestination200Response } from '../model/listFiltersFromDestination200Response';
import { PaginationInput } from '../model/paginationInput';
import { PreviewDestinationFilter200Response } from '../model/previewDestinationFilter200Response';
import { PreviewDestinationFilterV1Input } from '../model/previewDestinationFilterV1Input';
import { RemoveFilterFromDestination200Response } from '../model/removeFilterFromDestination200Response';
import { RequestErrorEnvelope } from '../model/requestErrorEnvelope';
import { UpdateFilterForDestination200Response } from '../model/updateFilterForDestination200Response';
import { UpdateFilterForDestinationV1Input } from '../model/updateFilterForDestinationV1Input';

import {
    ObjectSerializer,
    Authentication,
    VoidAuth,
    Interceptor,
} from '../model/models';
import {
    HttpBasicAuth,
    HttpBearerAuth,
    ApiKeyAuth,
    OAuth,
} from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.segmentapis.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DestinationFiltersApiApiKeys {}

export class DestinationFiltersApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders: any = {};
    protected _useQuerystring: boolean = false;

    protected authentications = {
        default: <Authentication>new VoidAuth(),
        token: new HttpBearerAuth(),
    };

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(
        basePathOrUsername: string,
        password?: string,
        basePath?: string
    ) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: DestinationFiltersApiApiKeys, value: string) {
        (this.authentications as any)[
            DestinationFiltersApiApiKeys[key]
        ].apiKey = value;
    }

    set accessToken(accessToken: string | (() => string)) {
        this.authentications.token.accessToken = accessToken;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Creates a filter in a Destination.    When called, this endpoint may generate the `Destination Filter Created` [Audit Trail](/tag/Audit-Trail) event.
     * @summary Create Filter for Destination
     * @param destinationId
     * @param CreateFilterForDestinationV1Input
     */
    public async createFilterForDestinationAlpha(
        destinationId: string,
        CreateFilterForDestinationV1Input: CreateFilterForDestinationV1Input,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: CreateFilterForDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters'.replace(
                '{' + 'destinationId' + '}',
                encodeURIComponent(String(destinationId))
            );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1alpha+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling createFilterForDestinationAlpha.'
            );
        }

        // verify required parameter 'CreateFilterForDestinationV1Input' is not null or undefined
        if (
            CreateFilterForDestinationV1Input === null ||
            CreateFilterForDestinationV1Input === undefined
        ) {
            throw new Error(
                'Required parameter CreateFilterForDestinationV1Input was null or undefined when calling createFilterForDestinationAlpha.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(
                CreateFilterForDestinationV1Input,
                'CreateFilterForDestinationV1Input'
            ),
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: CreateFilterForDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'CreateFilterForDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Creates a filter in a Destination.    When called, this endpoint may generate the `Destination Filter Created` [Audit Trail](/tag/Audit-Trail) event.
     * @summary Create Filter for Destination
     * @param destinationId
     * @param CreateFilterForDestinationV1Input
     */
    public async createFilterForDestinationBeta(
        destinationId: string,
        CreateFilterForDestinationV1Input: CreateFilterForDestinationV1Input,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: CreateFilterForDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters'.replace(
                '{' + 'destinationId' + '}',
                encodeURIComponent(String(destinationId))
            );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1beta+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling createFilterForDestinationBeta.'
            );
        }

        // verify required parameter 'CreateFilterForDestinationV1Input' is not null or undefined
        if (
            CreateFilterForDestinationV1Input === null ||
            CreateFilterForDestinationV1Input === undefined
        ) {
            throw new Error(
                'Required parameter CreateFilterForDestinationV1Input was null or undefined when calling createFilterForDestinationBeta.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(
                CreateFilterForDestinationV1Input,
                'CreateFilterForDestinationV1Input'
            ),
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: CreateFilterForDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'CreateFilterForDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Creates a filter in a Destination.    When called, this endpoint may generate the `Destination Filter Created` [Audit Trail](/tag/Audit-Trail) event.
     * @summary Create Filter for Destination
     * @param destinationId
     * @param CreateFilterForDestinationV1Input
     */
    public async createFilterForDestinationCurrent(
        destinationId: string,
        CreateFilterForDestinationV1Input: CreateFilterForDestinationV1Input,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: CreateFilterForDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters'.replace(
                '{' + 'destinationId' + '}',
                encodeURIComponent(String(destinationId))
            );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling createFilterForDestinationCurrent.'
            );
        }

        // verify required parameter 'CreateFilterForDestinationV1Input' is not null or undefined
        if (
            CreateFilterForDestinationV1Input === null ||
            CreateFilterForDestinationV1Input === undefined
        ) {
            throw new Error(
                'Required parameter CreateFilterForDestinationV1Input was null or undefined when calling createFilterForDestinationCurrent.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(
                CreateFilterForDestinationV1Input,
                'CreateFilterForDestinationV1Input'
            ),
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: CreateFilterForDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'CreateFilterForDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Creates a filter in a Destination.    When called, this endpoint may generate the `Destination Filter Created` [Audit Trail](/tag/Audit-Trail) event.
     * @summary Create Filter for Destination
     * @param destinationId
     * @param CreateFilterForDestinationV1Input
     */
    public async createFilterForDestinationV1(
        destinationId: string,
        CreateFilterForDestinationV1Input: CreateFilterForDestinationV1Input,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: CreateFilterForDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters'.replace(
                '{' + 'destinationId' + '}',
                encodeURIComponent(String(destinationId))
            );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling createFilterForDestinationV1.'
            );
        }

        // verify required parameter 'CreateFilterForDestinationV1Input' is not null or undefined
        if (
            CreateFilterForDestinationV1Input === null ||
            CreateFilterForDestinationV1Input === undefined
        ) {
            throw new Error(
                'Required parameter CreateFilterForDestinationV1Input was null or undefined when calling createFilterForDestinationV1.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(
                CreateFilterForDestinationV1Input,
                'CreateFilterForDestinationV1Input'
            ),
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: CreateFilterForDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'CreateFilterForDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Gets a Destination filter by id.
     * @summary Get Filter in Destination
     * @param destinationId
     * @param filterId
     */
    public async getFilterInDestinationAlpha(
        destinationId: string,
        filterId: string,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: GetFilterInDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters/{filterId}'
                .replace(
                    '{' + 'destinationId' + '}',
                    encodeURIComponent(String(destinationId))
                )
                .replace(
                    '{' + 'filterId' + '}',
                    encodeURIComponent(String(filterId))
                );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1alpha+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling getFilterInDestinationAlpha.'
            );
        }

        // verify required parameter 'filterId' is not null or undefined
        if (filterId === null || filterId === undefined) {
            throw new Error(
                'Required parameter filterId was null or undefined when calling getFilterInDestinationAlpha.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: GetFilterInDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'GetFilterInDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Gets a Destination filter by id.
     * @summary Get Filter in Destination
     * @param destinationId
     * @param filterId
     */
    public async getFilterInDestinationBeta(
        destinationId: string,
        filterId: string,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: GetFilterInDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters/{filterId}'
                .replace(
                    '{' + 'destinationId' + '}',
                    encodeURIComponent(String(destinationId))
                )
                .replace(
                    '{' + 'filterId' + '}',
                    encodeURIComponent(String(filterId))
                );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1beta+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling getFilterInDestinationBeta.'
            );
        }

        // verify required parameter 'filterId' is not null or undefined
        if (filterId === null || filterId === undefined) {
            throw new Error(
                'Required parameter filterId was null or undefined when calling getFilterInDestinationBeta.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: GetFilterInDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'GetFilterInDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Gets a Destination filter by id.
     * @summary Get Filter in Destination
     * @param destinationId
     * @param filterId
     */
    public async getFilterInDestinationCurrent(
        destinationId: string,
        filterId: string,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: GetFilterInDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters/{filterId}'
                .replace(
                    '{' + 'destinationId' + '}',
                    encodeURIComponent(String(destinationId))
                )
                .replace(
                    '{' + 'filterId' + '}',
                    encodeURIComponent(String(filterId))
                );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling getFilterInDestinationCurrent.'
            );
        }

        // verify required parameter 'filterId' is not null or undefined
        if (filterId === null || filterId === undefined) {
            throw new Error(
                'Required parameter filterId was null or undefined when calling getFilterInDestinationCurrent.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: GetFilterInDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'GetFilterInDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Gets a Destination filter by id.
     * @summary Get Filter in Destination
     * @param destinationId
     * @param filterId
     */
    public async getFilterInDestinationV1(
        destinationId: string,
        filterId: string,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: GetFilterInDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters/{filterId}'
                .replace(
                    '{' + 'destinationId' + '}',
                    encodeURIComponent(String(destinationId))
                )
                .replace(
                    '{' + 'filterId' + '}',
                    encodeURIComponent(String(filterId))
                );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling getFilterInDestinationV1.'
            );
        }

        // verify required parameter 'filterId' is not null or undefined
        if (filterId === null || filterId === undefined) {
            throw new Error(
                'Required parameter filterId was null or undefined when calling getFilterInDestinationV1.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: GetFilterInDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'GetFilterInDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Lists filters for a Destination.
     * @summary List Filters from Destination
     * @param destinationId
     * @param pagination Pagination options.  This parameter exists in alpha.
     */
    public async listFiltersFromDestinationAlpha(
        destinationId: string,
        pagination: PaginationInput,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: ListFiltersFromDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters'.replace(
                '{' + 'destinationId' + '}',
                encodeURIComponent(String(destinationId))
            );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1alpha+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling listFiltersFromDestinationAlpha.'
            );
        }

        // verify required parameter 'pagination' is not null or undefined
        if (pagination === null || pagination === undefined) {
            throw new Error(
                'Required parameter pagination was null or undefined when calling listFiltersFromDestinationAlpha.'
            );
        }

        if (pagination !== undefined) {
            localVarQueryParameters['pagination'] = ObjectSerializer.serialize(
                pagination,
                'PaginationInput'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: ListFiltersFromDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'ListFiltersFromDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Lists filters for a Destination.
     * @summary List Filters from Destination
     * @param destinationId
     * @param pagination Pagination options.  This parameter exists in alpha.
     */
    public async listFiltersFromDestinationBeta(
        destinationId: string,
        pagination: PaginationInput,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: ListFiltersFromDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters'.replace(
                '{' + 'destinationId' + '}',
                encodeURIComponent(String(destinationId))
            );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1beta+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling listFiltersFromDestinationBeta.'
            );
        }

        // verify required parameter 'pagination' is not null or undefined
        if (pagination === null || pagination === undefined) {
            throw new Error(
                'Required parameter pagination was null or undefined when calling listFiltersFromDestinationBeta.'
            );
        }

        if (pagination !== undefined) {
            localVarQueryParameters['pagination'] = ObjectSerializer.serialize(
                pagination,
                'PaginationInput'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: ListFiltersFromDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'ListFiltersFromDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Lists filters for a Destination.
     * @summary List Filters from Destination
     * @param destinationId
     * @param pagination Pagination options.  This parameter exists in alpha.
     */
    public async listFiltersFromDestinationCurrent(
        destinationId: string,
        pagination: PaginationInput,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: ListFiltersFromDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters'.replace(
                '{' + 'destinationId' + '}',
                encodeURIComponent(String(destinationId))
            );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling listFiltersFromDestinationCurrent.'
            );
        }

        // verify required parameter 'pagination' is not null or undefined
        if (pagination === null || pagination === undefined) {
            throw new Error(
                'Required parameter pagination was null or undefined when calling listFiltersFromDestinationCurrent.'
            );
        }

        if (pagination !== undefined) {
            localVarQueryParameters['pagination'] = ObjectSerializer.serialize(
                pagination,
                'PaginationInput'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: ListFiltersFromDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'ListFiltersFromDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Lists filters for a Destination.
     * @summary List Filters from Destination
     * @param destinationId
     * @param pagination Pagination options.  This parameter exists in alpha.
     */
    public async listFiltersFromDestinationV1(
        destinationId: string,
        pagination: PaginationInput,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: ListFiltersFromDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters'.replace(
                '{' + 'destinationId' + '}',
                encodeURIComponent(String(destinationId))
            );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling listFiltersFromDestinationV1.'
            );
        }

        // verify required parameter 'pagination' is not null or undefined
        if (pagination === null || pagination === undefined) {
            throw new Error(
                'Required parameter pagination was null or undefined when calling listFiltersFromDestinationV1.'
            );
        }

        if (pagination !== undefined) {
            localVarQueryParameters['pagination'] = ObjectSerializer.serialize(
                pagination,
                'PaginationInput'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: ListFiltersFromDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'ListFiltersFromDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Simulates the application of a Destination filter to a provided JSON payload.
     * @summary Preview Destination Filter
     * @param PreviewDestinationFilterV1Input
     */
    public async previewDestinationFilterAlpha(
        PreviewDestinationFilterV1Input: PreviewDestinationFilterV1Input,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: PreviewDestinationFilter200Response;
    }> {
        const localVarPath = this.basePath + '/destination/filters/preview';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1alpha+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'PreviewDestinationFilterV1Input' is not null or undefined
        if (
            PreviewDestinationFilterV1Input === null ||
            PreviewDestinationFilterV1Input === undefined
        ) {
            throw new Error(
                'Required parameter PreviewDestinationFilterV1Input was null or undefined when calling previewDestinationFilterAlpha.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(
                PreviewDestinationFilterV1Input,
                'PreviewDestinationFilterV1Input'
            ),
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: PreviewDestinationFilter200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'PreviewDestinationFilter200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Simulates the application of a Destination filter to a provided JSON payload.
     * @summary Preview Destination Filter
     * @param PreviewDestinationFilterV1Input
     */
    public async previewDestinationFilterBeta(
        PreviewDestinationFilterV1Input: PreviewDestinationFilterV1Input,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: PreviewDestinationFilter200Response;
    }> {
        const localVarPath = this.basePath + '/destination/filters/preview';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1beta+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'PreviewDestinationFilterV1Input' is not null or undefined
        if (
            PreviewDestinationFilterV1Input === null ||
            PreviewDestinationFilterV1Input === undefined
        ) {
            throw new Error(
                'Required parameter PreviewDestinationFilterV1Input was null or undefined when calling previewDestinationFilterBeta.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(
                PreviewDestinationFilterV1Input,
                'PreviewDestinationFilterV1Input'
            ),
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: PreviewDestinationFilter200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'PreviewDestinationFilter200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Simulates the application of a Destination filter to a provided JSON payload.
     * @summary Preview Destination Filter
     * @param PreviewDestinationFilterV1Input
     */
    public async previewDestinationFilterCurrent(
        PreviewDestinationFilterV1Input: PreviewDestinationFilterV1Input,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: PreviewDestinationFilter200Response;
    }> {
        const localVarPath = this.basePath + '/destination/filters/preview';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'PreviewDestinationFilterV1Input' is not null or undefined
        if (
            PreviewDestinationFilterV1Input === null ||
            PreviewDestinationFilterV1Input === undefined
        ) {
            throw new Error(
                'Required parameter PreviewDestinationFilterV1Input was null or undefined when calling previewDestinationFilterCurrent.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(
                PreviewDestinationFilterV1Input,
                'PreviewDestinationFilterV1Input'
            ),
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: PreviewDestinationFilter200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'PreviewDestinationFilter200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Simulates the application of a Destination filter to a provided JSON payload.
     * @summary Preview Destination Filter
     * @param PreviewDestinationFilterV1Input
     */
    public async previewDestinationFilterV1(
        PreviewDestinationFilterV1Input: PreviewDestinationFilterV1Input,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: PreviewDestinationFilter200Response;
    }> {
        const localVarPath = this.basePath + '/destination/filters/preview';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'PreviewDestinationFilterV1Input' is not null or undefined
        if (
            PreviewDestinationFilterV1Input === null ||
            PreviewDestinationFilterV1Input === undefined
        ) {
            throw new Error(
                'Required parameter PreviewDestinationFilterV1Input was null or undefined when calling previewDestinationFilterV1.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(
                PreviewDestinationFilterV1Input,
                'PreviewDestinationFilterV1Input'
            ),
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: PreviewDestinationFilter200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'PreviewDestinationFilter200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Deletes a Destination filter.    When called, this endpoint may generate the `Destination Filter Deleted` [Audit Trail](/tag/Audit-Trail) event.
     * @summary Remove Filter from Destination
     * @param destinationId
     * @param filterId
     */
    public async removeFilterFromDestinationAlpha(
        destinationId: string,
        filterId: string,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: RemoveFilterFromDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters/{filterId}'
                .replace(
                    '{' + 'destinationId' + '}',
                    encodeURIComponent(String(destinationId))
                )
                .replace(
                    '{' + 'filterId' + '}',
                    encodeURIComponent(String(filterId))
                );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1alpha+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling removeFilterFromDestinationAlpha.'
            );
        }

        // verify required parameter 'filterId' is not null or undefined
        if (filterId === null || filterId === undefined) {
            throw new Error(
                'Required parameter filterId was null or undefined when calling removeFilterFromDestinationAlpha.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: RemoveFilterFromDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'RemoveFilterFromDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Deletes a Destination filter.    When called, this endpoint may generate the `Destination Filter Deleted` [Audit Trail](/tag/Audit-Trail) event.
     * @summary Remove Filter from Destination
     * @param destinationId
     * @param filterId
     */
    public async removeFilterFromDestinationBeta(
        destinationId: string,
        filterId: string,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: RemoveFilterFromDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters/{filterId}'
                .replace(
                    '{' + 'destinationId' + '}',
                    encodeURIComponent(String(destinationId))
                )
                .replace(
                    '{' + 'filterId' + '}',
                    encodeURIComponent(String(filterId))
                );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1beta+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling removeFilterFromDestinationBeta.'
            );
        }

        // verify required parameter 'filterId' is not null or undefined
        if (filterId === null || filterId === undefined) {
            throw new Error(
                'Required parameter filterId was null or undefined when calling removeFilterFromDestinationBeta.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: RemoveFilterFromDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'RemoveFilterFromDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Deletes a Destination filter.    When called, this endpoint may generate the `Destination Filter Deleted` [Audit Trail](/tag/Audit-Trail) event.
     * @summary Remove Filter from Destination
     * @param destinationId
     * @param filterId
     */
    public async removeFilterFromDestinationCurrent(
        destinationId: string,
        filterId: string,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: RemoveFilterFromDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters/{filterId}'
                .replace(
                    '{' + 'destinationId' + '}',
                    encodeURIComponent(String(destinationId))
                )
                .replace(
                    '{' + 'filterId' + '}',
                    encodeURIComponent(String(filterId))
                );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling removeFilterFromDestinationCurrent.'
            );
        }

        // verify required parameter 'filterId' is not null or undefined
        if (filterId === null || filterId === undefined) {
            throw new Error(
                'Required parameter filterId was null or undefined when calling removeFilterFromDestinationCurrent.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: RemoveFilterFromDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'RemoveFilterFromDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Deletes a Destination filter.    When called, this endpoint may generate the `Destination Filter Deleted` [Audit Trail](/tag/Audit-Trail) event.
     * @summary Remove Filter from Destination
     * @param destinationId
     * @param filterId
     */
    public async removeFilterFromDestinationV1(
        destinationId: string,
        filterId: string,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: RemoveFilterFromDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters/{filterId}'
                .replace(
                    '{' + 'destinationId' + '}',
                    encodeURIComponent(String(destinationId))
                )
                .replace(
                    '{' + 'filterId' + '}',
                    encodeURIComponent(String(filterId))
                );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling removeFilterFromDestinationV1.'
            );
        }

        // verify required parameter 'filterId' is not null or undefined
        if (filterId === null || filterId === undefined) {
            throw new Error(
                'Required parameter filterId was null or undefined when calling removeFilterFromDestinationV1.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: RemoveFilterFromDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'RemoveFilterFromDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Updates a filter in a Destination.  When called, this endpoint may generate one or more of the following [Audit Trail](/tag/Audit-Trail) events: * Destination Filter Enabled * Destination Filter Disabled
     * @summary Update Filter for Destination
     * @param destinationId
     * @param filterId
     * @param UpdateFilterForDestinationV1Input
     */
    public async updateFilterForDestinationAlpha(
        destinationId: string,
        filterId: string,
        UpdateFilterForDestinationV1Input: UpdateFilterForDestinationV1Input,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: UpdateFilterForDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters/{filterId}'
                .replace(
                    '{' + 'destinationId' + '}',
                    encodeURIComponent(String(destinationId))
                )
                .replace(
                    '{' + 'filterId' + '}',
                    encodeURIComponent(String(filterId))
                );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1alpha+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling updateFilterForDestinationAlpha.'
            );
        }

        // verify required parameter 'filterId' is not null or undefined
        if (filterId === null || filterId === undefined) {
            throw new Error(
                'Required parameter filterId was null or undefined when calling updateFilterForDestinationAlpha.'
            );
        }

        // verify required parameter 'UpdateFilterForDestinationV1Input' is not null or undefined
        if (
            UpdateFilterForDestinationV1Input === null ||
            UpdateFilterForDestinationV1Input === undefined
        ) {
            throw new Error(
                'Required parameter UpdateFilterForDestinationV1Input was null or undefined when calling updateFilterForDestinationAlpha.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(
                UpdateFilterForDestinationV1Input,
                'UpdateFilterForDestinationV1Input'
            ),
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: UpdateFilterForDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'UpdateFilterForDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Updates a filter in a Destination.  When called, this endpoint may generate one or more of the following [Audit Trail](/tag/Audit-Trail) events: * Destination Filter Enabled * Destination Filter Disabled
     * @summary Update Filter for Destination
     * @param destinationId
     * @param filterId
     * @param UpdateFilterForDestinationV1Input
     */
    public async updateFilterForDestinationBeta(
        destinationId: string,
        filterId: string,
        UpdateFilterForDestinationV1Input: UpdateFilterForDestinationV1Input,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: UpdateFilterForDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters/{filterId}'
                .replace(
                    '{' + 'destinationId' + '}',
                    encodeURIComponent(String(destinationId))
                )
                .replace(
                    '{' + 'filterId' + '}',
                    encodeURIComponent(String(filterId))
                );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1beta+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling updateFilterForDestinationBeta.'
            );
        }

        // verify required parameter 'filterId' is not null or undefined
        if (filterId === null || filterId === undefined) {
            throw new Error(
                'Required parameter filterId was null or undefined when calling updateFilterForDestinationBeta.'
            );
        }

        // verify required parameter 'UpdateFilterForDestinationV1Input' is not null or undefined
        if (
            UpdateFilterForDestinationV1Input === null ||
            UpdateFilterForDestinationV1Input === undefined
        ) {
            throw new Error(
                'Required parameter UpdateFilterForDestinationV1Input was null or undefined when calling updateFilterForDestinationBeta.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(
                UpdateFilterForDestinationV1Input,
                'UpdateFilterForDestinationV1Input'
            ),
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: UpdateFilterForDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'UpdateFilterForDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Updates a filter in a Destination.  When called, this endpoint may generate one or more of the following [Audit Trail](/tag/Audit-Trail) events: * Destination Filter Enabled * Destination Filter Disabled
     * @summary Update Filter for Destination
     * @param destinationId
     * @param filterId
     * @param UpdateFilterForDestinationV1Input
     */
    public async updateFilterForDestinationCurrent(
        destinationId: string,
        filterId: string,
        UpdateFilterForDestinationV1Input: UpdateFilterForDestinationV1Input,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: UpdateFilterForDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters/{filterId}'
                .replace(
                    '{' + 'destinationId' + '}',
                    encodeURIComponent(String(destinationId))
                )
                .replace(
                    '{' + 'filterId' + '}',
                    encodeURIComponent(String(filterId))
                );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling updateFilterForDestinationCurrent.'
            );
        }

        // verify required parameter 'filterId' is not null or undefined
        if (filterId === null || filterId === undefined) {
            throw new Error(
                'Required parameter filterId was null or undefined when calling updateFilterForDestinationCurrent.'
            );
        }

        // verify required parameter 'UpdateFilterForDestinationV1Input' is not null or undefined
        if (
            UpdateFilterForDestinationV1Input === null ||
            UpdateFilterForDestinationV1Input === undefined
        ) {
            throw new Error(
                'Required parameter UpdateFilterForDestinationV1Input was null or undefined when calling updateFilterForDestinationCurrent.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(
                UpdateFilterForDestinationV1Input,
                'UpdateFilterForDestinationV1Input'
            ),
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: UpdateFilterForDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'UpdateFilterForDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Updates a filter in a Destination.  When called, this endpoint may generate one or more of the following [Audit Trail](/tag/Audit-Trail) events: * Destination Filter Enabled * Destination Filter Disabled
     * @summary Update Filter for Destination
     * @param destinationId
     * @param filterId
     * @param UpdateFilterForDestinationV1Input
     */
    public async updateFilterForDestinationV1(
        destinationId: string,
        filterId: string,
        UpdateFilterForDestinationV1Input: UpdateFilterForDestinationV1Input,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: UpdateFilterForDestination200Response;
    }> {
        const localVarPath =
            this.basePath +
            '/destination/{destinationId}/filters/{filterId}'
                .replace(
                    '{' + 'destinationId' + '}',
                    encodeURIComponent(String(destinationId))
                )
                .replace(
                    '{' + 'filterId' + '}',
                    encodeURIComponent(String(filterId))
                );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error(
                'Required parameter destinationId was null or undefined when calling updateFilterForDestinationV1.'
            );
        }

        // verify required parameter 'filterId' is not null or undefined
        if (filterId === null || filterId === undefined) {
            throw new Error(
                'Required parameter filterId was null or undefined when calling updateFilterForDestinationV1.'
            );
        }

        // verify required parameter 'UpdateFilterForDestinationV1Input' is not null or undefined
        if (
            UpdateFilterForDestinationV1Input === null ||
            UpdateFilterForDestinationV1Input === undefined
        ) {
            throw new Error(
                'Required parameter UpdateFilterForDestinationV1Input was null or undefined when calling updateFilterForDestinationV1.'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(
                UpdateFilterForDestinationV1Input,
                'UpdateFilterForDestinationV1Input'
            ),
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: UpdateFilterForDestination200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'UpdateFilterForDestination200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
}
