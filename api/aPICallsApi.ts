/**
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.4
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { GetDailyPerSourceAPICallsUsage200Response } from '../model/getDailyPerSourceAPICallsUsage200Response';
import { GetDailyWorkspaceAPICallsUsage200Response } from '../model/getDailyWorkspaceAPICallsUsage200Response';
import { PaginationInput } from '../model/paginationInput';
import { RequestErrorEnvelope } from '../model/requestErrorEnvelope';

import {
    ObjectSerializer,
    Authentication,
    VoidAuth,
    Interceptor,
} from '../model/models';
import {
    HttpBasicAuth,
    HttpBearerAuth,
    ApiKeyAuth,
    OAuth,
} from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.segmentapis.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum APICallsApiApiKeys {}

export class APICallsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders: any = {};
    protected _useQuerystring: boolean = false;

    protected authentications = {
        default: <Authentication>new VoidAuth(),
        token: new HttpBearerAuth(),
    };

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(
        basePathOrUsername: string,
        password?: string,
        basePath?: string
    ) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: APICallsApiApiKeys, value: string) {
        (this.authentications as any)[APICallsApiApiKeys[key]].apiKey = value;
    }

    set accessToken(accessToken: string | (() => string)) {
        this.authentications.token.accessToken = accessToken;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Provides daily cumulative per-source API call counts for a usage period.
     * @summary Get Daily Per Source API Calls Usage
     * @param period The start of the usage month in the ISO-8601 format.  This parameter exists in alpha.
     * @param pagination Pagination input for per Source API calls counts.  This parameter exists in alpha.
     */
    public async getDailyPerSourceAPICallsUsageAlpha(
        period: string,
        pagination: PaginationInput,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: GetDailyPerSourceAPICallsUsage200Response;
    }> {
        const localVarPath = this.basePath + '/usage/api-calls/sources/daily';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1alpha+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'period' is not null or undefined
        if (period === null || period === undefined) {
            throw new Error(
                'Required parameter period was null or undefined when calling getDailyPerSourceAPICallsUsageAlpha.'
            );
        }

        // verify required parameter 'pagination' is not null or undefined
        if (pagination === null || pagination === undefined) {
            throw new Error(
                'Required parameter pagination was null or undefined when calling getDailyPerSourceAPICallsUsageAlpha.'
            );
        }

        if (period !== undefined) {
            localVarQueryParameters['period'] = ObjectSerializer.serialize(
                period,
                'string'
            );
        }

        if (pagination !== undefined) {
            localVarQueryParameters['pagination'] = ObjectSerializer.serialize(
                pagination,
                'PaginationInput'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: GetDailyPerSourceAPICallsUsage200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'GetDailyPerSourceAPICallsUsage200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Provides daily cumulative per-source API call counts for a usage period.
     * @summary Get Daily Per Source API Calls Usage
     * @param period The start of the usage month in the ISO-8601 format.  This parameter exists in alpha.
     * @param pagination Pagination input for per Source API calls counts.  This parameter exists in alpha.
     */
    public async getDailyPerSourceAPICallsUsageBeta(
        period: string,
        pagination: PaginationInput,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: GetDailyPerSourceAPICallsUsage200Response;
    }> {
        const localVarPath = this.basePath + '/usage/api-calls/sources/daily';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1beta+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'period' is not null or undefined
        if (period === null || period === undefined) {
            throw new Error(
                'Required parameter period was null or undefined when calling getDailyPerSourceAPICallsUsageBeta.'
            );
        }

        // verify required parameter 'pagination' is not null or undefined
        if (pagination === null || pagination === undefined) {
            throw new Error(
                'Required parameter pagination was null or undefined when calling getDailyPerSourceAPICallsUsageBeta.'
            );
        }

        if (period !== undefined) {
            localVarQueryParameters['period'] = ObjectSerializer.serialize(
                period,
                'string'
            );
        }

        if (pagination !== undefined) {
            localVarQueryParameters['pagination'] = ObjectSerializer.serialize(
                pagination,
                'PaginationInput'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: GetDailyPerSourceAPICallsUsage200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'GetDailyPerSourceAPICallsUsage200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Provides daily cumulative per-source API call counts for a usage period.
     * @summary Get Daily Per Source API Calls Usage
     * @param period The start of the usage month in the ISO-8601 format.  This parameter exists in alpha.
     * @param pagination Pagination input for per Source API calls counts.  This parameter exists in alpha.
     */
    public async getDailyPerSourceAPICallsUsageCurrent(
        period: string,
        pagination: PaginationInput,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: GetDailyPerSourceAPICallsUsage200Response;
    }> {
        const localVarPath = this.basePath + '/usage/api-calls/sources/daily';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'period' is not null or undefined
        if (period === null || period === undefined) {
            throw new Error(
                'Required parameter period was null or undefined when calling getDailyPerSourceAPICallsUsageCurrent.'
            );
        }

        // verify required parameter 'pagination' is not null or undefined
        if (pagination === null || pagination === undefined) {
            throw new Error(
                'Required parameter pagination was null or undefined when calling getDailyPerSourceAPICallsUsageCurrent.'
            );
        }

        if (period !== undefined) {
            localVarQueryParameters['period'] = ObjectSerializer.serialize(
                period,
                'string'
            );
        }

        if (pagination !== undefined) {
            localVarQueryParameters['pagination'] = ObjectSerializer.serialize(
                pagination,
                'PaginationInput'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: GetDailyPerSourceAPICallsUsage200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'GetDailyPerSourceAPICallsUsage200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Provides daily cumulative per-source API call counts for a usage period.
     * @summary Get Daily Per Source API Calls Usage
     * @param period The start of the usage month in the ISO-8601 format.  This parameter exists in alpha.
     * @param pagination Pagination input for per Source API calls counts.  This parameter exists in alpha.
     */
    public async getDailyPerSourceAPICallsUsageV1(
        period: string,
        pagination: PaginationInput,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: GetDailyPerSourceAPICallsUsage200Response;
    }> {
        const localVarPath = this.basePath + '/usage/api-calls/sources/daily';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'period' is not null or undefined
        if (period === null || period === undefined) {
            throw new Error(
                'Required parameter period was null or undefined when calling getDailyPerSourceAPICallsUsageV1.'
            );
        }

        // verify required parameter 'pagination' is not null or undefined
        if (pagination === null || pagination === undefined) {
            throw new Error(
                'Required parameter pagination was null or undefined when calling getDailyPerSourceAPICallsUsageV1.'
            );
        }

        if (period !== undefined) {
            localVarQueryParameters['period'] = ObjectSerializer.serialize(
                period,
                'string'
            );
        }

        if (pagination !== undefined) {
            localVarQueryParameters['pagination'] = ObjectSerializer.serialize(
                pagination,
                'PaginationInput'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: GetDailyPerSourceAPICallsUsage200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'GetDailyPerSourceAPICallsUsage200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Provides daily cumulative API call counts for a usage period.
     * @summary Get Daily Workspace API Calls Usage
     * @param period The start of the usage month in the ISO-8601 format.  This parameter exists in alpha.
     * @param pagination Pagination input for Workspace API call counts.  This parameter exists in alpha.
     */
    public async getDailyWorkspaceAPICallsUsageAlpha(
        period: string,
        pagination: PaginationInput,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: GetDailyWorkspaceAPICallsUsage200Response;
    }> {
        const localVarPath = this.basePath + '/usage/api-calls/daily';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1alpha+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'period' is not null or undefined
        if (period === null || period === undefined) {
            throw new Error(
                'Required parameter period was null or undefined when calling getDailyWorkspaceAPICallsUsageAlpha.'
            );
        }

        // verify required parameter 'pagination' is not null or undefined
        if (pagination === null || pagination === undefined) {
            throw new Error(
                'Required parameter pagination was null or undefined when calling getDailyWorkspaceAPICallsUsageAlpha.'
            );
        }

        if (period !== undefined) {
            localVarQueryParameters['period'] = ObjectSerializer.serialize(
                period,
                'string'
            );
        }

        if (pagination !== undefined) {
            localVarQueryParameters['pagination'] = ObjectSerializer.serialize(
                pagination,
                'PaginationInput'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: GetDailyWorkspaceAPICallsUsage200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'GetDailyWorkspaceAPICallsUsage200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Provides daily cumulative API call counts for a usage period.
     * @summary Get Daily Workspace API Calls Usage
     * @param period The start of the usage month in the ISO-8601 format.  This parameter exists in alpha.
     * @param pagination Pagination input for Workspace API call counts.  This parameter exists in alpha.
     */
    public async getDailyWorkspaceAPICallsUsageBeta(
        period: string,
        pagination: PaginationInput,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: GetDailyWorkspaceAPICallsUsage200Response;
    }> {
        const localVarPath = this.basePath + '/usage/api-calls/daily';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1beta+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'period' is not null or undefined
        if (period === null || period === undefined) {
            throw new Error(
                'Required parameter period was null or undefined when calling getDailyWorkspaceAPICallsUsageBeta.'
            );
        }

        // verify required parameter 'pagination' is not null or undefined
        if (pagination === null || pagination === undefined) {
            throw new Error(
                'Required parameter pagination was null or undefined when calling getDailyWorkspaceAPICallsUsageBeta.'
            );
        }

        if (period !== undefined) {
            localVarQueryParameters['period'] = ObjectSerializer.serialize(
                period,
                'string'
            );
        }

        if (pagination !== undefined) {
            localVarQueryParameters['pagination'] = ObjectSerializer.serialize(
                pagination,
                'PaginationInput'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: GetDailyWorkspaceAPICallsUsage200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'GetDailyWorkspaceAPICallsUsage200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Provides daily cumulative API call counts for a usage period.
     * @summary Get Daily Workspace API Calls Usage
     * @param period The start of the usage month in the ISO-8601 format.  This parameter exists in alpha.
     * @param pagination Pagination input for Workspace API call counts.  This parameter exists in alpha.
     */
    public async getDailyWorkspaceAPICallsUsageCurrent(
        period: string,
        pagination: PaginationInput,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: GetDailyWorkspaceAPICallsUsage200Response;
    }> {
        const localVarPath = this.basePath + '/usage/api-calls/daily';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'period' is not null or undefined
        if (period === null || period === undefined) {
            throw new Error(
                'Required parameter period was null or undefined when calling getDailyWorkspaceAPICallsUsageCurrent.'
            );
        }

        // verify required parameter 'pagination' is not null or undefined
        if (pagination === null || pagination === undefined) {
            throw new Error(
                'Required parameter pagination was null or undefined when calling getDailyWorkspaceAPICallsUsageCurrent.'
            );
        }

        if (period !== undefined) {
            localVarQueryParameters['period'] = ObjectSerializer.serialize(
                period,
                'string'
            );
        }

        if (pagination !== undefined) {
            localVarQueryParameters['pagination'] = ObjectSerializer.serialize(
                pagination,
                'PaginationInput'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: GetDailyWorkspaceAPICallsUsage200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'GetDailyWorkspaceAPICallsUsage200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
    /**
     * Provides daily cumulative API call counts for a usage period.
     * @summary Get Daily Workspace API Calls Usage
     * @param period The start of the usage month in the ISO-8601 format.  This parameter exists in alpha.
     * @param pagination Pagination input for Workspace API call counts.  This parameter exists in alpha.
     */
    public async getDailyWorkspaceAPICallsUsageV1(
        period: string,
        pagination: PaginationInput,
        options: { headers: { [name: string]: string } } = { headers: {} }
    ): Promise<{
        response: http.IncomingMessage;
        body: GetDailyWorkspaceAPICallsUsage200Response;
    }> {
        const localVarPath = this.basePath + '/usage/api-calls/daily';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign(
            {},
            this._defaultHeaders
        );
        const produces = [
            'application/vnd.segment.v1+json',
            'application/json',
        ];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = produces[0];
        } else {
            localVarHeaderParams.Accept = 'application/json';
        }
        let localVarFormParams: any = {};

        // verify required parameter 'period' is not null or undefined
        if (period === null || period === undefined) {
            throw new Error(
                'Required parameter period was null or undefined when calling getDailyWorkspaceAPICallsUsageV1.'
            );
        }

        // verify required parameter 'pagination' is not null or undefined
        if (pagination === null || pagination === undefined) {
            throw new Error(
                'Required parameter pagination was null or undefined when calling getDailyWorkspaceAPICallsUsageV1.'
            );
        }

        if (period !== undefined) {
            localVarQueryParameters['period'] = ObjectSerializer.serialize(
                period,
                'string'
            );
        }

        if (pagination !== undefined) {
            localVarQueryParameters['pagination'] = ObjectSerializer.serialize(
                pagination,
                'PaginationInput'
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.token.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.token.applyToRequest(
                    localVarRequestOptions
                )
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions)
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() =>
                interceptor(localVarRequestOptions)
            );
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: GetDailyWorkspaceAPICallsUsage200Response;
            }>((resolve, reject) => {
                localVarRequest(
                    localVarRequestOptions,
                    (error, response, body) => {
                        if (error) {
                            reject(error);
                        } else {
                            if (
                                response.statusCode &&
                                response.statusCode >= 200 &&
                                response.statusCode <= 299
                            ) {
                                body = ObjectSerializer.deserialize(
                                    body,
                                    'GetDailyWorkspaceAPICallsUsage200Response'
                                );
                                resolve({ response: response, body: body });
                            } else {
                                reject(
                                    new HttpError(
                                        response,
                                        body,
                                        response.statusCode
                                    )
                                );
                            }
                        }
                    }
                );
            });
        });
    }
}
